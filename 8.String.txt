9. Given S1 ={"Flowers"}; S2={"are beautiful"},
a) Find the length of S1.
b) Concatenate S1 & s2.
c) Extract the substring "low" from S1.
d) Find "are" in S2 & replace it with "is".

#include<stdio.h>
#include<conio.h>
#include <string.h>
void main()
{
char str[100];
int len;
clrscr();
printf("\n\t\tENTER A STRING: ");
scanf("%s", str);
for(len=0;str[len]!='\0';len++);
printf("\n\t\tTHE LENGTH OF THE STRING IS %d",len);
getch();
}

******************
#include<stdio.h>
#include<conio.h>
#include<string.h>
void addstrings(char[], char[]);
int main() {
char s1[50], s2[50];
clrscr();
printf("\n\t\t Enter String 1 : ");
scanf("%s", s1);
printf("\n\t\t Enter String 2 : ");
scanf("%s", s2);
addstrings(s1, s2);
printf("\nConcatenated string is : %s ", s1);
getch();
}
void addstrings(char s1[], char s2[]) {
int i, j;
i = strlen(s1);
for (j = 0; s2[j] != '\0'; i++, j++) {
s1[i] = s2[j];
}
s1[i] = '\0';
}

******************************************
#include<stdio.h>
#include<conio.h>
void main()
{
char str[100], sstr[100];
int pos, l, c = 0;
clrscr();
printf("\n\nExtract a substring from a given string:\n");
printf("--------------------------------------------\n");
printf("Input the string : ");
fgets(str, sizeof str, stdin);
printf("Input the position to start extraction :");
scanf("%d", &pos);
printf("Input the length of substring :");
scanf("%d", &l);
while (c < l)
{
sstr[c] = str[pos+c-1];
c++;
}
sstr[c] = '\0';
printf("The substring retrieve from the string is : %s \n", sstr);
getch();
}

***********************
#include<stdio.h>
#include<conio.h>
#include<string.h>
void replaceSubstring(char [],char[],char[]);
main()
{
char string[100],sub[100],new_str[100];
clrscr();
printf("\nEnter a string: ");
gets(string);
printf("\nEnter the substring: ");
gets(sub);
printf("\nEnter the new substring: ");
gets(new_str);
replaceSubstring(string,sub,new_str);
printf("\nThe string after replacing : %s\n",string);
getch();
}
void replaceSubstring(char string[],char sub[],char new_str[])
{
int stringLen,subLen,newLen;
int i=0,j,k;
int flag=0,start,end;
stringLen=strlen(string);
subLen=strlen(sub);
newLen=strlen(new_str);
for(i=0;i<stringLen;i++)
{
flag=0;
start=i;
for(j=0;string[i]==sub[j];j++,i++)
if(j==subLen-1)
flag=1;
end=i;
if(flag==0)
i-=j;
else
{
for(j=start;j<end;j++)
{
for(k=start;k<stringLen;k++)
string[k]=string[k+1];
stringLen--;
i--;
}
for(j=start;j<start+newLen;j++)
{
for(k=stringLen;k>=j;k--)
string[k+1]=string[k];
string[j]=new_str[j-start];
stringLen++;
i++;
}
}
}
}
