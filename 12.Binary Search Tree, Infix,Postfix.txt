#include<stdio.h>
#include<conio.h>
#include<stdlib.h>

typedef struct node
{
struct node *left;
int info;
struct node *right;
}stype;
stype *root=NULL,*par,*cur,*newnode;
initialize();
insert(int elem);
preorder(stype *root);
inorder(stype *root);
postorder(stype *root);

void main()
{
int choice,number;
do
{
//clrscr();
printf("\n\t\tBST Recursive Traversal Techniques");
printf("\n1.Initializing BST to empty");
printf("\n2.Inserting element into BST");
printf("\n3.Preorder Traversal");
printf("\n4.Inorder Traversal");
printf("\n5.Postorder Traversal");
printf("\n6.Exit");
printf("\nEnter your choice : ");
scanf("%d",&choice);
switch(choice)
{
case 1 : initialize();
break;
case 2 : printf("\nEnter number to insert into BST : ");
scanf("%d",&number);
insert(number);
break;
case 3 : preorder(root);
break;
case 4 : inorder(root);
break;
case 5 : postorder(root);
break;
default : printf("\nProgram Terminated");
}
getch();
}while(choice>0 && choice<6 );
}
initialize()
{
root=NULL;
printf("\nThe Binary Search Tree is initialized");
return 0;
}
insert(int elem)
{
newnode=(stype *)malloc(sizeof(stype));
newnode->info=elem;
newnode->left=NULL;
newnode->right=NULL;
if(root == NULL)
root = newnode;
else
{
cur = root;
while(cur != NULL)
{
par = cur;
if(elem<=cur->info)
cur=cur->left;
else
cur=cur->right;
}
if(elem<=par->info)
par->left=newnode;
else
par->right=newnode;
}
printf("\nThe element inserted into BST successfully");
return 0;
}
preorder(stype *root)
{
if(root!=NULL)
{
printf("%4d",root->info);
preorder(root->left);
preorder(root->right);
}
return 0;
}
inorder(stype *root)
{
if(root!=NULL)
{
inorder(root->left);
printf("%4d",root->info);
inorder(root->right);
}
return 0;
}
postorder(stype *root)
{
if(root!=NULL)
{
postorder(root->left);
postorder(root->right);
printf("%4d",root->info);
}
return 0;
}